"use strict";(self.webpackChunkgamedevforge=self.webpackChunkgamedevforge||[]).push([[304],{612:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=r(4848),s=r(8453),t=r(6450);const i={description:"What are operators in Java?",tags:["Java","Beginner","Core"],slug:"/java-operators",sidebar_position:3,draft:!1},o="Operators",l={id:"java/core/core-fundamentals/java-operators",title:"Operators",description:"What are operators in Java?",source:"@site/docs/java/core/core-fundamentals/java-operators.mdx",sourceDirName:"java/core/core-fundamentals",slug:"/java-operators",permalink:"/docs/java-operators",draft:!1,unlisted:!1,tags:[{label:"Java",permalink:"/docs/tags/java"},{label:"Beginner",permalink:"/docs/tags/beginner"},{label:"Core",permalink:"/docs/tags/core"}],version:"current",sidebarPosition:3,frontMatter:{description:"What are operators in Java?",tags:["Java","Beginner","Core"],slug:"/java-operators",sidebar_position:3,draft:!1},sidebar:"modulesSidebar",previous:{title:"Variables",permalink:"/docs/java-variables"}},d={},c=[{value:"What are Operands?",id:"what-are-operands",level:2},{value:"Types of Operators",id:"types-of-operators",level:2},{value:"Arithmetic",id:"arithmetic",level:3},{value:"Relational",id:"relational",level:3},{value:"Logical",id:"logical",level:3},{value:"Assignment",id:"assignment",level:3},{value:"Unary",id:"unary",level:3},{value:"Bitwise",id:"bitwise",level:3},{value:"Conditional",id:"conditional",level:3},{value:"Operator Precedence",id:"operator-precedence",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"operators",children:"Operators"}),"\n",(0,a.jsxs)(n.p,{children:["In Java, operators are symbols like ",(0,a.jsx)(n.code,{children:"+"}),", ",(0,a.jsx)(n.code,{children:"-"}),", ",(0,a.jsx)(n.code,{children:"/"}),", etc. that perform operations between two values and are fundamental to any programming language.\r\nWithout operators, we wouldn't be able to compare values, perform ",(0,a.jsx)(t.A,{text:"arithmetic"})," operations, or even assign values to variables.\r\nThis is done by the usage of symbols to effect ",(0,a.jsx)(t.A,{text:"operands"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"what-are-operands",children:"What are Operands?"}),"\n",(0,a.jsxs)(n.p,{children:["In programming terms, operands are the values or variables that operators can perform operations on.\r\nTake the expression ",(0,a.jsx)(n.code,{children:"5 + 3"})," for instance, ",(0,a.jsx)(n.code,{children:"5"})," and ",(0,a.jsx)(n.code,{children:"3"})," are the operands and ",(0,a.jsx)(n.code,{children:"+"})," is the operator in this scenario."]}),"\n",(0,a.jsx)(n.h2,{id:"types-of-operators",children:"Types of Operators"}),"\n",(0,a.jsx)(n.p,{children:"Java supports many types of operators, all with different use cases.\r\nFor instance, consider a simple task of checking if a value is equal to 1 and then reacting to that in code by running an action.\r\nThis would use both control-flow and a relational operator like so."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"int someNumber = 1;\r\nif (someNumber == 1) // == <-- Relational operator.\r\n{\r\n    DoSomething();\r\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Let's go over all the different types of operators in more detail."}),"\n",(0,a.jsx)(n.h3,{id:"arithmetic",children:"Arithmetic"}),"\n",(0,a.jsx)(n.p,{children:"Arithmetic operators are used to perform basic mathematical operations on two operands, mainly numerical types.\r\nIn Java, there are five arithmetic operators:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Addition ",(0,a.jsx)(n.code,{children:"+"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Adds the two operands together."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Subtraction ",(0,a.jsx)(n.code,{children:"-"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Subtracts the right operand from the left one."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Multiplication ",(0,a.jsx)(n.code,{children:"*"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Multiplies the two operands together."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Division ",(0,a.jsx)(n.code,{children:"/"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Divides the left operand by the right one."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Modulus ",(0,a.jsx)(n.code,{children:"%"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Returns the remainder of a division operation."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"int a = 10;\r\nint b = 5;\r\n\r\nint Addition = a + b; // Result: 15\r\n\r\nint Subtraction = a - b; // Result: 5\r\n\r\nint Multiplication = a * b; // Result: 50\r\n\r\nint Division = a / b; // Result: 2\r\n\r\nint Modulus = a % b; // Result: 0\r\n\r\n// You can also perform operations directly with values as-well\r\nint AddValue = a + 20; // Result: 30\r\n\n"})}),"\n",(0,a.jsx)(n.h3,{id:"relational",children:"Relational"}),"\n",(0,a.jsx)(n.p,{children:"Relational operators are used to compare two operands. In Java, there are six relational operators:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Equal to ",(0,a.jsx)(n.code,{children:"=="}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Checks if the two operands are equal."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Not equal to ",(0,a.jsx)(n.code,{children:"!="}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Checks if the two operands are not equal."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Greater than ",(0,a.jsx)(n.code,{children:">"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Checks if the left operand is greater than the right one."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Less than ",(0,a.jsx)(n.code,{children:"<"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Checks if the left operand is less than the right one."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Greater than or equal to ",(0,a.jsx)(n.code,{children:">="}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Checks if the left operand is greater than or equal to the right one."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Less than or equal to ",(0,a.jsx)(n.code,{children:"<="}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Checks if the left operand is less than or equal to the right one."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"int a = 10;\r\nint b = 5;\r\n\r\nboolean bIsEqual = a == b; // Result: false\r\n\r\nboolean bIsNotEqual = a != b; // Result: true\r\n\r\nboolean bIsGreaterThan = a > b; // Result: true\r\n\r\nboolean bIsLessThan = a < b; // Result: false\r\n\r\nboolean bIsGreaterThanOrEqual = a >= b; // Result: true\r\n\r\nboolean bIsLessThanOrEqual = a <= b; // Result: false\r\n\r\n// You can also perform operations directly with values as-well\r\nboolean bIsEqualValue = a == 10; // Result: true\n"})}),"\n",(0,a.jsxs)(n.p,{children:["These are mainly used in control-flow structures such as ",(0,a.jsx)(n.code,{children:"if"}),", ",(0,a.jsx)(n.code,{children:"while"}),", and ",(0,a.jsx)(n.code,{children:"for"})," loops, where they help determine the\r\npath that the code should take based on certain conditions. We will discuss this in more detail in the control-flow page.\r\nThey are also used in conditional operators."]}),"\n",(0,a.jsx)(n.h3,{id:"logical",children:"Logical"}),"\n",(0,a.jsx)(n.p,{children:"Logical operators are used to perform logical operations, typically within conditional statements. In Java, there are three primary logical operators:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["AND ",(0,a.jsx)(n.code,{children:"&&"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Returns true if both operands are true."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["OR ",(0,a.jsx)(n.code,{children:"||"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Returns true if at least one of the operands is true."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["NOT ",(0,a.jsx)(n.code,{children:"!"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Returns the inverse of the operand. If the operand is true, it returns false, and vice versa."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"boolean bTrue = true;\r\nboolean bFalse = false;\r\n\r\nboolean bAnd = bTrue && bFalse; // Result: false\r\n\r\nboolean bOr = bTrue || bFalse; // Result: true\r\n\r\nboolean bNot = !bTrue; // Result: false\n"})}),"\n",(0,a.jsx)(n.p,{children:"Much like the relational operators these are also used typically in control-flow structures to determine paths code should take based on these conditions."}),"\n",(0,a.jsx)(n.h3,{id:"assignment",children:"Assignment"}),"\n",(0,a.jsx)(n.p,{children:"Assignment operators are used to assign values to variables of a given data type. In Java, there are several assignment operators:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Assignment ",(0,a.jsx)(n.code,{children:"="}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Assigns the value from the right operand to the left operand."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Add and assign ",(0,a.jsx)(n.code,{children:"+="}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Adds the right operand to the left operand and assigns the result to the left operand."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Subtract and assign ",(0,a.jsx)(n.code,{children:"-="}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Subtracts the right operand from the left operand and assigns the result to the left operand."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Multiply and assign ",(0,a.jsx)(n.code,{children:"*="}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Multiplies the right operand by the left operand and assigns the result to the left operand."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Divide and assign ",(0,a.jsx)(n.code,{children:"/="}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Divides the left operand by the right operand and assigns the result to the left operand."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Modulus and assign ",(0,a.jsx)(n.code,{children:"%="}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Takes the modulus of the left operand by the right operand and assigns the result to the left operand."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"int a = 10;\r\nint b = 5;\r\n\r\na += b; // a = a + b, Result: 15\r\n\r\na -= b; // a = a - b, Result: 10\r\n\r\na *= b; // a = a * b, Result: 50\r\n\r\na /= b; // a = a / b, Result: 10\r\n\r\na %= b; // a = a % b, Result: 0\r\n\r\n// You can also perform operations directly with values as-well\r\na += 20; // a = a + 20, Result: 20\n"})}),"\n",(0,a.jsx)(n.h3,{id:"unary",children:"Unary"}),"\n",(0,a.jsx)(n.p,{children:"Unary operators are used to perform operations on a single operand. In Java, there are five primary unary operators:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Unary minus ",(0,a.jsx)(n.code,{children:"-"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Negates an expression."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Increment ",(0,a.jsx)(n.code,{children:"++"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Increases the value of a variable by 1."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Decrement ",(0,a.jsx)(n.code,{children:"--"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Decreases the value of a variable by 1."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["NOT ",(0,a.jsx)(n.code,{children:"!"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Returns the inverse of the operand. If the operand is true, it returns false, and vice versa."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Bitwise Complement ",(0,a.jsx)(n.code,{children:"~"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Inverts all bits in the operand."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Some of these are duplicates from other operator types because they are also classed as unary operators."})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"int a = 10;\r\n\r\nint unaryMinus = -a; // Result: -10\r\n\r\na++; // a = a + 1, Result: 11\r\n\r\na--; // a = a - 1, Result: 10\r\n\r\nboolean bTrue = true;\r\nboolean bNot = !bTrue; // Result: false\r\n\r\nint someNumber = 60; // 60 = 0011 1100\r\nint bitwiseComplement = ~someNumber;\r\n// someNumber -> 0011 1100\r\n// Result: -61 = 1100 0011\n"})}),"\n",(0,a.jsx)(n.h3,{id:"bitwise",children:"Bitwise"}),"\n",(0,a.jsx)(n.p,{children:"Bitwise operators are used to perform operations on individual bits of integer data types.\r\nIn Java, there are six bitwise operators:"}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsx)(n.p,{children:"These are the hardest operators to grasp and I would suggest they are more towards advanced Java usage, so don't worry about fully grasping these early on."})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["AND ",(0,a.jsx)(n.code,{children:"&"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Performs a Boolean AND operation on each bit of its integer arguments."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["OR ",(0,a.jsx)(n.code,{children:"|"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Performs a Boolean OR operation on each bit of its integer arguments."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["XOR ",(0,a.jsx)(n.code,{children:"^"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Performs a Boolean exclusive OR operation (meaning only 1 of two arguments can be true) on each bit of its integer arguments."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Complement ",(0,a.jsx)(n.code,{children:"~"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Unary operator that inverts all bits in the operand."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Left shift ",(0,a.jsx)(n.code,{children:"<<"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Shifts the bits of the number to the left and fills 0 on voids left as a result. The leftmost bits are discarded."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Right shift ",(0,a.jsx)(n.code,{children:">>"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Shifts the bits of the number to the right and fills 0 on voids left as a result. The rightmost bits are discarded."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"int a = 60; // 60 = 0011 1100\r\nint b = 13; // 13 = 0000 1101\r\n\r\nint and = a & b;\r\n// a ->         0011 1100\r\n// b ->         0000 1101\r\n// Result: 12 = 0000 1100\r\n\r\nint or = a | b;\r\n// a ->         0011 1100\r\n// b ->         0000 1101\r\n// Result: 61 = 0011 1101\r\n\r\nint xOr = a ^ b;\r\n// a ->         0011 1100\r\n// b ->         0000 1101\r\n// Result: 49 = 0011 0001\r\n\r\nint complement = ~a;\r\n// a ->          0011 1100\r\n// Result: -61 = 1100 0011\r\n\r\nint leftShift = a << 2;\r\n// a ->    0011 1100\r\n// Result: 240 = 1111 0000 - All bits have been shifted 2 places to the left\r\n\r\nint rightShift = a >> 2;\r\n// a ->    0011 1100\r\n// Result: 15 = 0000 1111 - All bits have been shifted 2 places to the right\n"})}),"\n",(0,a.jsx)(n.h3,{id:"conditional",children:"Conditional"}),"\n",(0,a.jsxs)(n.p,{children:["The conditional operator, also known as the ternary operator, is a shorthand for an ",(0,a.jsx)(n.code,{children:"if-else"})," statement and is the only operator in Java that works on three operands."]}),"\n",(0,a.jsxs)(n.p,{children:["The operator is represented as ",(0,a.jsx)(n.code,{children:"? :"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"It starts with a boolean expression (the condition)."}),"\n",(0,a.jsxs)(n.li,{children:["If the condition is true, it returns the value before the ",(0,a.jsx)(n.code,{children:":"})," (the if part)."]}),"\n",(0,a.jsxs)(n.li,{children:["If the condition is false, it returns the value after the ",(0,a.jsx)(n.code,{children:":"})," (the else part)."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"int a = 10;\r\nint b = 5;\r\n\r\nint SomeResult = (a < b) ? a : b; // Result: 5\r\n// If a is less than b, set SomeResult to a, otherwise; set SomeResult to b\n"})}),"\n",(0,a.jsx)(n.h2,{id:"operator-precedence",children:"Operator Precedence"}),"\n",(0,a.jsx)(n.p,{children:"Operator precedence determines the order that operations are performed when an expression involves multiple operators.\r\nOperators with higher precedence are evaluated before operators with lower precedence.\r\nOperators with the same precedence are evaluated from left-right,\r\nexcept for assignment operators, which are evaluated from right-left."}),"\n",(0,a.jsxs)(n.p,{children:["I don't want to go into too much detail here as there are already resources available for explaining operator precedence:\r\n",(0,a.jsx)(n.a,{href:"https://www.javatpoint.com/java-operator-precedence",children:"https://www.javatpoint.com/java-operator-precedence"})]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},6450:(e,n,r)=>{r.d(n,{A:()=>d});var a=r(6540);const s="tooltipContainer_klWT",t="tooltipBox_kLVV",i="textBox_o4OJ",o={"hello-world":"hello-world is a simple program used to introduce syntax, environment setup, and output functionality",gitbash:"GitBash is a terminal emulator for Git on Windows, facilitating version control and command-line operations",sourcetree:"SourceTree is a graphical Git client used for managing repositories, simplifying version control workflows visually",directx:"DirectX is an API framework facilitating advanced 3D graphics rendering for Windows, Xbox and Linux",vulkan:"Vulkan is a cross-platform API framework for high-performance 3D graphics rendering","data driven development":"Data-Driven Development is an approach where functionality is based on data, iterative development, and easy modification to empower designers","source control":"Source Control is a system managing changes to code, enabling collaboration, tracking history, and ensuring versioning",debugging:"Debugging in an IDE allows developers to identify and fix software issues efficiently with integrated tools",perforce:"Perforce is a version control system facilitating collaborative software development, particularly in game development environments",repository:"A repository, or repo, is a central location/database where all project files and their version history are stored",git:"Git is an open source control system for tracking changes in source code during software development",gitlab:"GitLab unlike GitHub is open-source, it is a web-based source control system",github:"A web-based platform for version control using Git, facilitating collaboration, code sharing, and project management among software developers","open-source":"Open-source software is publicly accessible code that can be freely inspected, modified, and distributed",ide:"IDE stands for Integrated Development Environment, they provide developers with tools for writing, debugging, and testing code","code completion":"Code Completion is a feature in IDEs that automatically suggests and completes code, variable names, methods, and other elements as you type","c++":"An advanced programming language, known for its high performance and low-level control, making it ideal performance-critical applications","c#":"A modern programming language developed by Microsoft, known for its strong support for object-oriented programming and its rich set of features",java:"A high-level, object-oriented programming language. Known for its simplicity, platform independence, and robustness",api:"Application Programming Interface, which provides a set of pre-defined functions, classes, and protocols. Streamlining the development process and promoting code reuse",jvm:"Java Virtual Machine, is an abstract computing machine that enables Java code to be executed regardless of platform",console:"A text-based interface for user-computer interaction, enabling text input and output, often used for program execution, system monitoring, and debugging","program arguments":"Flags or values that you can pass into an application. Can be viewed as inputs that can enable/disable certain features or functionality of an application","environment variables":"Variables that are part of the operating systems environment. They store information such as paths to important directories, system configurations, or user preferences",variable:"A symbolic name that represents a stored value in code",class:"A container defining variables and functionality to serve a specific purpose in an application or feature",abstraction:"The process of simplifying complex systems by focusing on essential properties while hiding unnecessary details",inheritance:"A feature of object-oriented programming where a new class inherits properties and behaviors (methods) from a given class",polymorphism:"A feature of object-oriented programming where different classes can be treated interchangeably, allowing flexible method behaviors that can be overridden in a hierarchical class structure",signed:"Signed data types reserve one bit to represent the sign of the value, allowing for both positive and negative values",unsigned:"Unsigned data types use all bits to represent the only positive values",operators:"Operators are symbols that perform operations on operands. They can be arithmetic (like +, -, *, /), relational (like ==, !=, >, <), logical (like &&, ||), and more",scope:"Scopes determine where a variable or a function can be accessed. There are two main types of scope: local and global","class instance":"A single occurrence of an object, created from a class. It has its own properties and methods",refactor:"Process of improving code structure without altering its functionality for better readability and maintainability",operand:"An operand in programming is a data item that operators perform operations on",operands:"Operands in programming are a data items that operators perform operations on",arithmetic:"Refers to dealing with numerical computation using math, such as addition, subtraction, multiplication, and division"};var l=r(4848);const d=e=>{let{text:n,info:r}=e;const[d,c]=(0,a.useState)(!1),[h,p]=(0,a.useState)({x:0,y:0}),u=o[n.toLowerCase()],m=r||u||"Missing tool-tip!";let f=h.x+20+"px";if("undefined"!=typeof window&&h.x+20>window.innerWidth-300){let e=h.x/window.innerWidth;f=h.x-200*e+"px"}const x={position:"fixed",top:h.y+20+"px",left:f};return(0,l.jsxs)("span",{className:s,onMouseEnter:()=>{c(!0)},onMouseLeave:()=>{c(!1)},onMouseMove:e=>{p({x:e.clientX,y:e.clientY})},children:[(0,l.jsx)("code",{className:i,children:n}),d&&(0,l.jsx)("div",{className:t,style:x,children:m})]})}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var a=r(6540);const s={},t=a.createContext(s);function i(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);