"use strict";(self.webpackChunkgamedevforge=self.webpackChunkgamedevforge||[]).push([[1702],{9913:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var t=n(4848),i=n(8453),a=n(6450);const r={description:"What are modules and what makes them up.",tags:["Introduction","Modules"],slug:"/modules-overview",sidebar_position:2},s="Modules Overview",l={id:"modules-overview",title:"Modules Overview",description:"What are modules and what makes them up.",source:"@site/docs/modules-overview.mdx",sourceDirName:".",slug:"/modules-overview",permalink:"/docs/modules-overview",draft:!1,unlisted:!1,tags:[{label:"Introduction",permalink:"/docs/tags/introduction"},{label:"Modules",permalink:"/docs/tags/modules"}],version:"current",sidebarPosition:2,frontMatter:{description:"What are modules and what makes them up.",tags:["Introduction","Modules"],slug:"/modules-overview",sidebar_position:2},sidebar:"modulesSidebar",previous:{title:"Introduction",permalink:"/docs/introduction"},next:{title:"Source Control",permalink:"/docs/source-control"}},c={},d=[{value:"What are Modules?",id:"what-are-modules",level:2},{value:"Module Layout",id:"module-layout",level:2},{value:"Introduction",id:"introduction",level:3},{value:"Core",id:"core",level:3},{value:"Project",id:"project",level:3},{value:"Additional Resources",id:"additional-resources",level:3},{value:"Conclusion",id:"conclusion",level:3}];function u(e){const o={admonition:"admonition",h1:"h1",h2:"h2",h3:"h3",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h1,{id:"modules-overview",children:"Modules Overview"}),"\n",(0,t.jsx)(o.h2,{id:"what-are-modules",children:"What are Modules?"}),"\n",(0,t.jsxs)(o.p,{children:["Modules cover a range of topics, from getting started with basic ",(0,t.jsx)(a.A,{text:"Java"})," to diving into ",(0,t.jsx)(a.A,{text:"GitHub"})," or ",(0,t.jsx)(a.A,{text:"C++"}),".\nPages inside modules are tagged as beginner, intermediate, or advanced based on how tough they are."]}),"\n",(0,t.jsxs)(o.p,{children:["On the left side, you'll see the main modules, like ",(0,t.jsx)(a.A,{text:"Java"}),". Click on one, and you'll find a nested folder structure for that module.\nBreaking things down like this makes the information much more digestible. Plus, it's handy for more advanced developers who may want a more streamlined experience."]}),"\n",(0,t.jsx)(o.h2,{id:"module-layout",children:"Module Layout"}),"\n",(0,t.jsx)(o.p,{children:"Where possible, pages will follow a layout in-terms of folder structure and naming convensions."}),"\n",(0,t.jsx)(o.h3,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(o.p,{children:"Before diving into the specifics of each module, it's important to understand the structure and core concepts that you will learn throughout.\nEach module commences with an introductory page, a high-level explanation of what it entails, the aims, and if relevant, an eviroment setup."}),"\n",(0,t.jsx)("code",{children:"Tag: Introduction"}),"\n",(0,t.jsx)(o.h3,{id:"core",children:"Core"}),"\n",(0,t.jsxs)(o.p,{children:["The modules in general are designed to cover a wide range of core concepts essential for game development. Each module will core pages, covering\nfundamental principles ranging from ",(0,t.jsx)("code",{children:"mathematics"}),", ",(0,t.jsx)("code",{children:"coding languages"}),", ",(0,t.jsx)("code",{children:"industry standard practices"}),", ",(0,t.jsx)("code",{children:"software"}),", ",(0,t.jsx)("code",{children:"architecture"})," and the list goes on."]}),"\n",(0,t.jsx)(o.p,{children:"Example projects may also be used on these pages to help solidify your knowledge.\nThink of a core pages as building blocks that enable you to tackle specific area of a project."}),"\n",(0,t.jsx)("code",{children:"Tag: Core"}),"\n",(0,t.jsx)(o.h3,{id:"project",children:"Project"}),"\n",(0,t.jsxs)(o.p,{children:["These are carefully crafted to reinforce core concepts and facilitate the practical application of learned skills.\nFor instance, in the beginner Java module, we kick off with a ",(0,t.jsx)(a.A,{text:"hello-world"})," project, gradually evolving it into a sophisticated 2D game engine, as one of the projects."]}),"\n",(0,t.jsx)(o.p,{children:"Additionally, you may encounter smaller projects, serving as learning aids for grasping smaller, bite-sized core concepts, along with a example projects\nthat solve a given problem. These sections are pivotal as it transforms theoretical knowledge into tangible skills."}),"\n",(0,t.jsxs)(o.p,{children:[(0,t.jsx)("code",{children:"Tag: Project"}),"\n\xa0"]}),"\n",(0,t.jsx)(o.admonition,{type:"note",children:(0,t.jsx)(o.p,{children:"Some modules may not feature a project if it's deemed irrelevant to the module's focus."})}),"\n",(0,t.jsx)(o.h3,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,t.jsx)(o.p,{children:"Some modules may also have additional resources, this could be extra tasks on a project or a game jam where you can showcase your newfound skills and add a polished project with core concepts to your portfolio."}),"\n",(0,t.jsx)(o.p,{children:"Additionally, you'll find supplementary learning resources to deepen your exploration of core concepts covered in the module."}),"\n",(0,t.jsx)("code",{children:"Tag: Extra"}),"\n",(0,t.jsx)(o.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(o.p,{children:"Each module will have closing thoughts and influence to look back on what you have achieved. Summarize what has been covered and offer guidance for the next steps."}),"\n",(0,t.jsx)(o.p,{children:"By adhering to a structured format and including key components such as core concepts, hands-on projects, and supplementary materials, my hope is for an enriching learning experience for aspiring game developers."}),"\n",(0,t.jsxs)(o.p,{children:[(0,t.jsx)("code",{children:"Tag: Conclusion"}),"\n\xa0"]}),"\n",(0,t.jsx)(o.admonition,{type:"tip",children:(0,t.jsxs)(o.p,{children:["If you are a beginner I highly recommend starting with the ",(0,t.jsx)("code",{children:(0,t.jsx)(o.strong,{children:"Source Control"})})," page."]})})]})}function p(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},6450:(e,o,n)=>{n.d(o,{A:()=>c});var t=n(6540);const i="tooltipContainer_klWT",a="tooltipBox_kLVV",r="textBox_o4OJ",s={"hello-world":"hello-world is a simple program used to introduce syntax, environment setup, and output functionality",gitbash:"GitBash is a terminal emulator for Git on Windows, facilitating version control and command-line operations",sourcetree:"SourceTree is a graphical Git client used for managing repositories, simplifying version control workflows visually",directx:"DirectX is an API framework facilitating advanced 3D graphics rendering for Windows, Xbox and Linux",vulkan:"Vulkan is a cross-platform API framework for high-performance 3D graphics rendering","data driven development":"Data-Driven Development is an approach where functionality is based on data, iterative development, and easy modification to empower designers","source control":"Source Control is a system managing changes to code, enabling collaboration, tracking history, and ensuring versioning",debugging:"Debugging in an IDE allows developers to identify and fix software issues efficiently with integrated tools",perforce:"Perforce is a version control system facilitating collaborative software development, particularly in game development environments",repository:"A repository, or repo, is a central location/database where all project files and their version history are stored",git:"Git is an open source control system for tracking changes in source code during software development",gitlab:"GitLab unlike GitHub is open-source, it is a web-based source control system",github:"A web-based platform for version control using Git, facilitating collaboration, code sharing, and project management among software developers","open-source":"Open-source software is publicly accessible code that can be freely inspected, modified, and distributed",ide:"IDE stands for Integrated Development Environment, they provide developers with tools for writing, debugging, and testing code","code completion":"Code Completion is a feature in IDEs that automatically suggests and completes code, variable names, methods, and other elements as you type","c++":"An advanced programming language, known for its high performance and low-level control, making it ideal performance-critical applications","c#":"A modern programming language developed by Microsoft, known for its strong support for object-oriented programming and its rich set of features",java:"A high-level, object-oriented programming language. Known for its simplicity, platform independence, and robustness",api:"Application Programming Interface, which provides a set of pre-defined functions, classes, and protocols. Streamlining the development process and promoting code reuse",jvm:"Java Virtual Machine, is an abstract computing machine that enables Java code to be executed regardless of platform",console:"A text-based interface for user-computer interaction, enabling text input and output, often used for program execution, system monitoring, and debugging","program arguments":"Flags or values that you can pass into an application. Can be viewed as inputs that can enable/disable certain features or functionality of an application","environment variables":"Variables that are part of the operating systems environment. They store information such as paths to important directories, system configurations, or user preferences",variable:"A symbolic name that represents a stored value in code",class:"A container defining variables and functionality to serve a specific purpose in an application or feature",abstraction:"The process of simplifying complex systems by focusing on essential properties while hiding unnecessary details",inheritance:"A feature of object-oriented programming where a new class inherits properties and behaviors (methods) from a given class",polymorphism:"A feature of object-oriented programming where different classes can be treated interchangeably, allowing flexible method behaviors that can be overridden in a hierarchical class structure",signed:"Signed data types reserve one bit to represent the sign of the value, allowing for both positive and negative values",unsigned:"Unsigned data types use all bits to represent the only positive values",operators:"Operators are symbols that perform operations on operands. They can be arithmetic (like +, -, *, /), relational (like ==, !=, >, <), logical (like &&, ||), and more",scope:"Scopes determine where a variable or a function can be accessed. There are two main types of scope: local and global","class instance":"A single occurrence of an object, created from a class. It has its own properties and methods",refactor:"Process of improving code structure without altering its functionality for better readability and maintainability"};var l=n(4848);const c=e=>{let{text:o,info:n}=e;const[c,d]=(0,t.useState)(!1),[u,p]=(0,t.useState)({x:0,y:0}),h=s[o.toLowerCase()],m=n||h||"Missing tool-tip!";let g=u.x+20+"px";if("undefined"!=typeof window&&u.x+20>window.innerWidth-300){let e=u.x/window.innerWidth;g=u.x-200*e+"px"}const f={position:"fixed",top:u.y+20+"px",left:g};return(0,l.jsxs)("span",{className:i,onMouseEnter:()=>{d(!0)},onMouseLeave:()=>{d(!1)},onMouseMove:e=>{p({x:e.clientX,y:e.clientY})},children:[(0,l.jsx)("code",{className:r,children:o}),c&&(0,l.jsx)("div",{className:a,style:f,children:m})]})}},8453:(e,o,n)=>{n.d(o,{R:()=>r,x:()=>s});var t=n(6540);const i={},a=t.createContext(i);function r(e){const o=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:o},e.children)}}}]);