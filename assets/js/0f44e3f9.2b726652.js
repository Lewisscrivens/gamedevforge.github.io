"use strict";(self.webpackChunkgamedevforge=self.webpackChunkgamedevforge||[]).push([[3918],{3348:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var i=n(4848),r=n(8453),s=n(6450);const t={description:"What are the different types of variables in Java?",tags:["Java","Beginner","Core"],slug:"/java-variables",sidebar_position:2,draft:!1},o="Variables",l={id:"java/core/core-fundamentals/java-variables",title:"Variables",description:"What are the different types of variables in Java?",source:"@site/docs/java/core/core-fundamentals/java-variables.mdx",sourceDirName:"java/core/core-fundamentals",slug:"/java-variables",permalink:"/docs/java-variables",draft:!1,unlisted:!1,tags:[{label:"Java",permalink:"/docs/tags/java"},{label:"Beginner",permalink:"/docs/tags/beginner"},{label:"Core",permalink:"/docs/tags/core"}],version:"current",sidebarPosition:2,frontMatter:{description:"What are the different types of variables in Java?",tags:["Java","Beginner","Core"],slug:"/java-variables",sidebar_position:2,draft:!1},sidebar:"modulesSidebar",previous:{title:"Primitive Types",permalink:"/docs/java-primitive-types"}},c={},d=[{value:"Declaration",id:"declaration",level:2},{value:"Initialisation",id:"initialisation",level:2},{value:"Variable Inference",id:"variable-inference",level:2},{value:"Types of Variables",id:"types-of-variables",level:2},{value:"Local Variables",id:"local-variables",level:3},{value:"Instance Variables",id:"instance-variables",level:3},{value:"Static Variables",id:"static-variables",level:3},{value:"Constants",id:"constants",level:2}];function h(e){const a={admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.h1,{id:"variables",children:"Variables"}),"\n",(0,i.jsx)(a.p,{children:"Java uses variables to store values of a declared type in memory."}),"\n",(0,i.jsxs)(a.p,{children:["A variable in Java is a named value in memory, depending on the type of variable it can be\r\nmanipulated by ",(0,i.jsx)(s.A,{text:"operators"}),". Each variable must be declared with a specific data type,\r\nwhich determines the kind of data it will hold and the operations that can be performed on/with it."]}),"\n",(0,i.jsx)(a.h2,{id:"declaration",children:"Declaration"}),"\n",(0,i.jsx)(a.p,{children:"To make use of variables they must first be declared. You can do this by entering the variables type,\r\nthen its name."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:"int someNumber = 10;\r\nboolean bSomeBoolean = true;\r\nchar someCharacter = 'A';\n"})}),"\n",(0,i.jsxs)(a.p,{children:["Consider the declared variable ",(0,i.jsx)("code",{children:"int someNumber = 10;"})," here's a breakdown:"]}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:["Data type ",(0,i.jsx)("code",{children:"int"})]}),"\n",(0,i.jsxs)(a.li,{children:["Variable name ",(0,i.jsx)("code",{children:"someNumber"})]}),"\n",(0,i.jsxs)(a.li,{children:["Value ",(0,i.jsx)("code",{children:"10"})]}),"\n",(0,i.jsxs)(a.li,{children:["Ending statement ",(0,i.jsx)("code",{children:";"})]}),"\n"]}),"\n",(0,i.jsx)(a.p,{children:"A variable name cannot be anything, they have to follow a certain rules:"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsx)(a.li,{children:"The first character cannot be a number."}),"\n",(0,i.jsx)(a.li,{children:"Characters used must be a letter (a-z or A-Z), number (0-9), dollar sign ($), or underscore (_)."}),"\n",(0,i.jsxs)(a.li,{children:["Names are case-sensitive. ",(0,i.jsx)("code",{children:"myVariable"})," and ",(0,i.jsx)("code",{children:"myvariable"})," are different."]}),"\n",(0,i.jsxs)(a.li,{children:["Reserved words in Java cannot be used as variable names. Things like ",(0,i.jsx)("code",{children:"int"}),", ",(0,i.jsx)("code",{children:"class"}),", ",(0,i.jsx)("code",{children:"public"}),", etc."]}),"\n",(0,i.jsx)(a.li,{children:"Names should not contain whitespace or special characters like !, @, #, %, etc."}),"\n"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:"// Error\r\nint 1stNumber = 1;           // Error, first character is a number\r\n\r\n// Error\r\nboolean classIsOpen = false; // Error, class is used in name\r\n\r\n// Error\r\nboolean bStopApp! = false;   // Error, '!' is used in name\n"})}),"\n",(0,i.jsx)(a.h2,{id:"initialisation",children:"Initialisation"}),"\n",(0,i.jsx)(a.p,{children:"Initialisation is an important step when declaring a variable. In the Declaration section,\r\nall examples are initialised during declaration.\r\nThis doesn't have to be the case though, variables can be initialised in different ways."}),"\n",(0,i.jsx)(a.p,{children:"To start with here is an uninitialized variable:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:'// Uninitialized variable\r\nint numberOfApples;\r\n\r\n// Using an uninitialized variable will result in an error\r\n// Error\r\nSystem.out.println("Number of apples: " + numberOfApples);\n'})}),"\n",(0,i.jsx)(a.p,{children:"Variables can be initialised either during declaration or on a separate line. As shown in the example above, attempting to use\r\nan uninitialized variable will result in an error."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:"// Seperate initialisation\r\nint numberOfApples;\r\nnumberOfApples = 5;\r\n\r\n// Declaration initialisation\r\nint numberOfApples = 5;\n"})}),"\n",(0,i.jsx)(a.h2,{id:"variable-inference",children:"Variable Inference"}),"\n",(0,i.jsxs)(a.p,{children:["In Java, you can infer a type when declaring a variable by using the ",(0,i.jsx)("code",{children:"var"})," keyword.\r\nIt can only be used if you are initialising during declaration like so."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:"var someNumber = 5;         // This will default the type to int\r\nvar someOtherNumber = 5.5f; // This will default the type to float\n"})}),"\n",(0,i.jsx)(a.admonition,{type:"note",children:(0,i.jsxs)(a.p,{children:["Using variable inference is a matter of personal preference.",(0,i.jsx)(a.br,{}),"\n","While it can have its benefits, beginners might find it easier to explicitly declare variable types."]})}),"\n",(0,i.jsx)(a.p,{children:"This can be used however you see fit, I mainly use it for complex types; these could change with different versions\r\nof Java or external API. Using var in these scenarios can avoid the need to reflect these changes in any\r\npre-existing code when updating to these newer versions."}),"\n",(0,i.jsxs)(a.p,{children:["Some other articles you might read mention it improves readability, but I disagree. It's a hot topic\r\nespecially in the game industry where C++ is one of the most common languages with its equivalent being the\r\n",(0,i.jsx)("code",{children:"auto"})," keyword."]}),"\n",(0,i.jsx)(a.h2,{id:"types-of-variables",children:"Types of Variables"}),"\n",(0,i.jsx)(a.p,{children:"In Java there are three main types of variables:"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsx)("code",{children:"Local variables"}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsx)("code",{children:"Instance variables"}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsx)("code",{children:"Static variables"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(a.admonition,{type:"note",children:(0,i.jsx)(a.p,{children:"Some descriptions mention classes, scopes and methods. These are all discussed in later pages."})}),"\n",(0,i.jsx)(a.h3,{id:"local-variables",children:"Local Variables"}),"\n",(0,i.jsxs)(a.p,{children:["Local variables are declared within a methods local ",(0,i.jsx)(s.A,{text:"scope"}),", once the scope has ended\r\nits local variables are destroyed. This of course means you cannot access local variables from outside their scope."]}),"\n",(0,i.jsx)(a.p,{children:"These are widely used for various reasons, for holding values temporarily to provide some intended\r\nfunctionality of a method."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:"public void exampleMethod() {\r\n    // This is a local variable\r\n    // Highlight\r\n    int localVariable = 10;\r\n    System.out.println(localVariable); // It can be used within this method\r\n}\r\n\r\npublic void otherMethod() {\r\n    // This would throw an error, cannot access localVariable from outside of its local scope\r\n    // Error\r\n    System.out.println(localVariable);\r\n}\n"})}),"\n",(0,i.jsx)(a.h3,{id:"instance-variables",children:"Instance Variables"}),"\n",(0,i.jsxs)(a.p,{children:["Instance variables also known as class properties, are declared in a classes scope, but outside any of its methods.\r\nThey are created and tied to an object (a ",(0,i.jsx)(s.A,{text:"class instance"}),") when its created."]}),"\n",(0,i.jsx)(a.p,{children:"We will discuss these variables in more detail in the classes page, but put simply, they exist\r\nwhile their owning object exists, and are destroyed when that object is destroyed."}),"\n",(0,i.jsx)(a.p,{children:"Each object of a class has its own copy of the instance variables.\r\nThis means that if you change the value of an instance variable in one object,\r\nit does not affect the value of that same variable in other objects of the same class type."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:"public class ExampleClass {\r\n\r\n    // This is an instance variable\r\n    int instanceVariable = 10;\r\n\r\n    public void exampleMethod() {\r\n        // It can be used throughout the classes scope\r\n        System.out.println(instanceVariable);\r\n    }\r\n\r\n    public void otherMethod() {\r\n        System.out.println(instanceVariable);\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(a.h3,{id:"static-variables",children:"Static Variables"}),"\n",(0,i.jsx)(a.p,{children:"Static variables, much like instance variables are declared within a classes scope, but outside any\r\nof its methods. However, unlike instance variables, static variables are not tied to any specific object;\r\ninstead, they are shared among all objects of the class."}),"\n",(0,i.jsx)(a.p,{children:"If you change the value of a static variable in one object, it changes for all objects of the class.\r\nThey can also be accessed without requiring an object of the class they are declared within, instead\r\nyou can use the class directly."}),"\n",(0,i.jsx)(a.p,{children:"They are created when the class itself is loaded into memory and are destroyed when the\r\nclass is unloaded. They are typically used for values which are supposed to be shared across\r\nall instances of a class."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:"public class ExampleClass {\r\n\r\n    // This is a static variable\r\n    static int staticVariable = 10;\r\n\r\n    public void printStaticVariable() {\r\n        System.out.println(staticVariable);\r\n    }\r\n}\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        // Create two instances of the ExampleClass type\r\n        ExampleClass classInstanceA = new ExampleClass();\r\n        ExampleClass classInstanceB = new ExampleClass();\r\n\r\n        // Print starting value\r\n        System.out.println(ExampleClass.staticVariable);\r\n\r\n        // Increase the static variable\r\n        ExampleClass.staticVariable++;\r\n        ExampleClass.staticVariable++;\r\n\r\n        // For both objects of ExampleClass increase and print the static variables value\r\n        classInstanceA.printStaticVariable();\r\n        classInstanceB.printStaticVariable();\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(a.p,{children:"Output:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{children:"10\r\n12\r\n12\n"})}),"\n",(0,i.jsx)(a.h2,{id:"constants",children:"Constants"}),"\n",(0,i.jsxs)(a.p,{children:["Constants in Java are variables whose values cannot be changed once they are assigned.\r\nAny variable can be made a constant by using the ",(0,i.jsx)("code",{children:"final"})," keyword during its declaration\r\nor in a class's constructor."]}),"\n",(0,i.jsx)(a.p,{children:"The naming convention for constants is usually declared using uppercase letters with underscores to\r\nseparate the words, although this is optional. They are typically leveraged to define fixed values that\r\nare used in multiple places, such as mathematical constants, configuration values, error messages etc."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-java",children:"// These are constant static variables\r\npublic static final double PI = 3.141592653589793; // Pi for mathematical calculations\r\npublic static final int DEFAULT_TIMEOUT = 5000;    // Error message for an application timeout\n"})})]})}function p(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},6450:(e,a,n)=>{n.d(a,{A:()=>c});var i=n(6540);const r="tooltipContainer_klWT",s="tooltipBox_kLVV",t="textBox_o4OJ",o={"hello-world":"hello-world is a simple program used to introduce syntax, environment setup, and output functionality",gitbash:"GitBash is a terminal emulator for Git on Windows, facilitating version control and command-line operations",sourcetree:"SourceTree is a graphical Git client used for managing repositories, simplifying version control workflows visually",directx:"DirectX is an API framework facilitating advanced 3D graphics rendering for Windows, Xbox and Linux",vulkan:"Vulkan is a cross-platform API framework for high-performance 3D graphics rendering","data driven development":"Data-Driven Development is an approach where functionality is based on data, iterative development, and easy modification to empower designers","source control":"Source Control is a system managing changes to code, enabling collaboration, tracking history, and ensuring versioning",debugging:"Debugging in an IDE allows developers to identify and fix software issues efficiently with integrated tools",perforce:"Perforce is a version control system facilitating collaborative software development, particularly in game development environments",repository:"A repository, or repo, is a central location/database where all project files and their version history are stored",git:"Git is an open source control system for tracking changes in source code during software development",gitlab:"GitLab unlike GitHub is open-source, it is a web-based source control system",github:"A web-based platform for version control using Git, facilitating collaboration, code sharing, and project management among software developers","open-source":"Open-source software is publicly accessible code that can be freely inspected, modified, and distributed",ide:"IDE stands for Integrated Development Environment, they provide developers with tools for writing, debugging, and testing code","code completion":"Code Completion is a feature in IDEs that automatically suggests and completes code, variable names, methods, and other elements as you type","c++":"An advanced programming language, known for its high performance and low-level control, making it ideal performance-critical applications","c#":"A modern programming language developed by Microsoft, known for its strong support for object-oriented programming and its rich set of features",java:"A high-level, object-oriented programming language. Known for its simplicity, platform independence, and robustness",api:"Application Programming Interface, which provides a set of pre-defined functions, classes, and protocols. Streamlining the development process and promoting code reuse",jvm:"Java Virtual Machine, is an abstract computing machine that enables Java code to be executed regardless of platform",console:"A text-based interface for user-computer interaction, enabling text input and output, often used for program execution, system monitoring, and debugging","program arguments":"Flags or values that you can pass into an application. Can be viewed as inputs that can enable/disable certain features or functionality of an application","environment variables":"Variables that are part of the operating systems environment. They store information such as paths to important directories, system configurations, or user preferences",variable:"A symbolic name that represents a stored value in code",class:"A container defining variables and functionality to serve a specific purpose in an application or feature",abstraction:"The process of simplifying complex systems by focusing on essential properties while hiding unnecessary details",inheritance:"A feature of object-oriented programming where a new class inherits properties and behaviors (methods) from a given class",polymorphism:"A feature of object-oriented programming where different classes can be treated interchangeably, allowing flexible method behaviors that can be overridden in a hierarchical class structure",signed:"Signed data types reserve one bit to represent the sign of the value, allowing for both positive and negative values",unsigned:"Unsigned data types use all bits to represent the only positive values",operators:"Operators are symbols that perform operations on operands. They can be arithmetic (like +, -, *, /), relational (like ==, !=, >, <), logical (like &&, ||), and more",scope:"Scopes determine where a variable or a function can be accessed. There are two main types of scope: local and global","class instance":"A single occurrence of an object, created from a class. It has its own properties and methods",refactor:"Process of improving code structure without altering its functionality for better readability and maintainability"};var l=n(4848);const c=e=>{let{text:a,info:n}=e;const[c,d]=(0,i.useState)(!1),[h,p]=(0,i.useState)({x:0,y:0}),u=o[a.toLowerCase()],m=n||u||"Missing tool-tip!";let b=h.x+20+"px";if("undefined"!=typeof window&&h.x+20>window.innerWidth-300){let e=h.x/window.innerWidth;b=h.x-200*e+"px"}const v={position:"fixed",top:h.y+20+"px",left:b};return(0,l.jsxs)("span",{className:r,onMouseEnter:()=>{d(!0)},onMouseLeave:()=>{d(!1)},onMouseMove:e=>{p({x:e.clientX,y:e.clientY})},children:[(0,l.jsx)("code",{className:t,children:a}),c&&(0,l.jsx)("div",{className:s,style:v,children:m})]})}},8453:(e,a,n)=>{n.d(a,{R:()=>t,x:()=>o});var i=n(6540);const r={},s=i.createContext(r);function t(e){const a=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(s.Provider,{value:a},e.children)}}}]);